##########################################
### Train EO and LO ml models
# Load packages

library(dplyr)
library(tidyverse)
library(stringr)
library(ranger)
library(mlr3tuning)
library(mlr3extralearners)
library(ggembl)
library(mlr3)
library(SIAMCAT)
library(here)


# Load metadata and data
source(here('src','analysis','utils.R'))

all.meta<- read_tsv(here('data','results',"Metadata.all.samples.balanced.tsv")) %>% filter(Condition=='CRC'| Condition=='CTR') %>% 
  as.data.frame() %>% column_to_rownames('Sample_ID')

all.data <- read.table(here('data','results','Relab.all.samples.balanced.tsv'),sep='\t', check.names = F) %>%
  rownames_to_column('genus') %>% filter(genus!='unassigned') %>% column_to_rownames('genus')


models.eo.rf <- models.lo.rf<- list()
models.all.rf<- list()

# For EO and LO models also balance samples 
## Load all meta and data tables

all.meta<- read_tsv(here('data','results',"Metadata.all.samples.tsv")) %>% filter(Condition=='CRC'| Condition=='CTR') %>% 
  as.data.frame() %>% column_to_rownames('Sample_ID')

all.data <- read.table(here('data','results','Relab.all.samples.tsv'),sep='\t', check.names = F) %>%
  rownames_to_column('genus') %>% filter(genus!='unassigned') %>% column_to_rownames('genus')


balanced_data_metadata_eocrc<-balance_data_by_groups(meta_df = all.meta.unfiltered %>%
                                                       rownames_to_column('Sample_ID') %>%
                                                       filter(Group %in% c('EO-CRC', 'EO-CTR')) %>%
                                                       group_by(Cohort) %>%
                                                       filter(all(c('EO-CRC', 'EO-CTR') %in% Group)) %>%
                                                       ungroup(),
                                                     data_df=all.data.unfiltered, 
                                                  group_column = 'Group', groups  = c('EO-CRC','EO-CTR'), seed = 2002)

balanced_data_metadata_locrc<-balance_data_by_groups(meta_df = all.meta.unfiltered %>%
                                                       rownames_to_column('Sample_ID') %>%
                                                       filter(Group %in% c('LO-CRC', 'LO-CTR')) %>%
                                                       group_by(Cohort) %>%
                                                       filter(all(c('LO-CRC', 'LO-CTR') %in% Group)) %>%
                                                       ungroup(),
                                                     
                                                     data_df=all.data.unfiltered, 
                                                  group_column = 'Group', groups  = c('LO-CRC','LO-CTR'), seed = 2002)


models.eo.rf<-train_model_rf(meta_df = balanced_data_metadata_eocrc$meta,mat = balanced_data_metadata_eocrc$data,label_column = 'Group',case_label = 'EO-CRC',
                             control_label = 'EO-CTR', block_label = 'Cohort', num_trees = 200, seed = 2000,prev.cutoff = 0.1)
models.lo.rf<-train_model_rf(meta_df = balanced_data_metadata_locrc$meta,mat = balanced_data_metadata_locrc$data,label_column = 'Group',case_label = 'LO-CRC',
                             control_label = 'LO-CTR', block_label = 'Cohort', num_trees = 200, seed = 2000,prev.cutoff = 0.1)



## Late onset hold out testing using Early onset trained models

label<-create.label(meta = balanced_data_metadata_locrc$meta,label='Group',case='LO-CRC',control = 'LO-CTR')

siamcat.test <- siamcat(feat= balanced_data_metadata_locrc$data, meta= balanced_data_metadata_locrc$meta,
                       label=label, case='LO-CRC')

siamcat.test.predicted<- make.predictions(models.eo.rf , siamcat.test)

siamcat.test.evaluated.lo.holdout.rf<-evaluate.predictions(siamcat.test.predicted)
print(siamcat.test.evaluated.lo.holdout.rf)

## Early onset hold out testing using Late onset trained models

label<-create.label(meta = balanced_data_metadata_eocrc$meta, label='Group',case='EO-CRC',control = 'EO-CTR')

siamcat.test <- siamcat(feat=balanced_data_metadata_eocrc$data, meta=balanced_data_metadata_eocrc$meta,
                       label=label, case='EO-CRC')

siamcat.test.predicted<- make.predictions(models.lo.rf , siamcat.test)
siamcat.test.evaluated.eo.holdout.rf <- evaluate.predictions(siamcat.test.predicted)
print(siamcat.test.evaluated.eo.holdout.rf)

save(models.eo.rf,models.lo.rf,siamcat.test.evaluated.eo.holdout.rf,siamcat.test.evaluated.lo.holdout.rf,
     file='/g/scb/zeller/pekel/meta_analysis/src/analysis/Rdata_updated/Training.eolo.all.data.Rdata')

load('/g/scb/zeller/pekel/meta_analysis/src/analysis/Rdata_updated/Training.eolo.all.data.Rdata')

models.all.rf<-train_model_rf(meta_df = all.meta,mat = all.data,label_column = 'Condition',case_label = 'CRC',control_label = 'CTR',
                              num_trees = 200, seed = 2000,prev.cutoff = 0.1)


save(models.all.rf, 
     file='/g/scb/zeller/pekel/meta_analysis/src/analysis/Rdata_updated/Training.all.data.rf.Rdata')


#Plot the roc curves of the EO model

models <- list(models.eo.rf, siamcat.test.evaluated.eo.holdout.rf)
labels <- c("Classifier cross validated on EO-CRC","Classifier trained on LO-CRC and tested on EO-CRC")
trained_on <- list(NULL, models.lo.rf)
colours <- c( "darkorange", "black" )

eo_models_auc_plot <- plot_roc_siamcat_models(models, labels, colours, trained_on, alpha=0.7)


ggsave(eo_models_auc_plot, file=here('src','plots','Fig2','Eo.model.and.evaluation.roc.250331.pdf'),width = 6, height = 6)


# Plot only lo model for supp


models <- list(models.lo.rf, siamcat.test.evaluated.lo.holdout.rf)
labels <- c("Classifier cross validated on LO-CRC", 'Classifier trained on EO-CRC and tested on LO-CRC"')
trained_on <- list(NULL, models.eo.rf)
colours <- c( "darkred" , 'black')

lo_models_auc_plot<- plot_roc_siamcat_models(models, labels, colours, trained_on,alpha=0.8)

ggsave(lo_models_auc_plot, file=here('src','plots','Fig2_supp','Lo.model.roc.250331.pdf'),width = 6, height = 6)

#Plot the general CRC model


models <- list(models.all.rf)
labels <- c("Classifier cross validated on CRC")
colours <- c( "black" )

crc_model_auc_plot<- plot_roc_siamcat_models(models, labels, colours, alpha=0.8)

ggsave(crc_model_auc_plot, file=here('src','plots','Fig3','CRC.general.model.roc.250217.pdf'),width = 6, height = 6)


# 
# # Make a scatter plot for model coefficients
# 
# lo.weights <-feature_weights(models.lo.rf) %>% select(Lo.median.weight=median.weight) %>% rownames_to_column('Bacteria')
# 
# eo.weights <-feature_weights(models.eo.rf) %>% select(Eo.median.weight=median.weight) %>% rownames_to_column('Bacteria')
# el.lo.weights <- eo.weights %>% left_join(lo.weights, by = 'Bacteria')
# 
# library(ggplot2)
# library(ggrepel)
# 
# median_weights_scatter<- ggplot(el.lo.weights, aes(x = Eo.median.weight, y = Lo.median.weight)) +
#   geom_point(
#     size = 5,
#     shape = 21, color = "black", alpha = 0.75 ,fill='grey33') +
#   geom_hline(yintercept = 0, color = "grey", lty = "solid", lwd = 0.3) +
#   geom_vline(xintercept = 0, color = "grey", lty = "solid", lwd = 0.3) +
#   geom_abline(slope = 1, intercept = 0, color = "grey", lty = "solid", lwd = 0.3) +
#   ggrepel::geom_text_repel(aes(label = Bacteria),
#                            color = "black",
#                            segment.color = "black",
#                            segment.size = 0.5,      
#                            max.overlaps = 50,      
#                            min.segment.length = 0.1,  
#                            size = 4
#   )+
#   theme_paper +
#   theme(
#     legend.box = "horizontal",
#     legend.spacing.y = unit(0.1, "cm"),
#     legend.position = c(.01, .99),
#     legend.key.size = unit(0.75, "lines"),
#     legend.justification = c(0, 1),
#     panel.grid.minor = element_blank(),
#     panel.grid.major = element_blank()
#   ) +
#   guides(
#     size = "none",
#     fill = guide_legend(order = 2, override.aes = list(size = 3.5))
#   ) +
#   coord_fixed(ratio = 1, xlim = c(0,0.035), ylim = c(0,0.035))
# 
# ggsave(median_weights_scatter, file=here('src','plots','Fig2','Eo.lo.model.median.weight.250320.pdf'),width = 5, height = 5)
# 
